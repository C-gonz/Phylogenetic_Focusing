#!/bin/bash
 
help() {
cat << EOF
----------------------------------------------
PhyFocus v2.0 (Jul/13/2021)
github repository: https://github.com/C-gonz/Phylogenetic_Focusing
----------------------------------------------

Syntax: ./${0##*/} [-h] [-q ./file] [-f ./directory/] [-t num] [-E value] [-m string] [-b num] [-a num] [-s] [-e value] [-r string]

-h <help>   Display this help and exit

-q QUERY    Required; fasta file containing bait and anchor query peptides

-f FASTAS   Required; directory containing peptide fasta files for each species in the phylogeny

-H HMMR     Required; Peptide fasta alignment for making the HMMR profile

-t THREADS  Optional; The number of threads used for BLAST, IQtree, & Orthomatic. Default = 24

-E EVALUE   Optional; The e-value significance cutoff used in BLAST. Default = 1e-05

-m MODEL    Optional; The peptide substitution model used by IQTree. Recommend LG for testing. Default = MFP+C60

-b BOOT     Optional; The number of Ultrafast Bootstrap replicates used by IQTree. Default = 1000

-a IQALRT   Optional; The number of SH-aLRT Bootstrap replicates used by IQTree. Default = 1000

#-s SPTREE   Optional; Create a corresponding species tree for the Phyfocus phylogeny. Default = off
#-e SPEVALUE Optional if SPTREE; Specify e-value cutoff for Orthomatic BLAST. Default = 1e-20
#-r SPREF    Required if SPTREE; Specifies reference genus (must match FASTA header) for Orthomatic.

Description:

PhyFocus identifies phylogenetic relationships missed by more narrow approaches.
For each provided input species, the program first captures putative homologs of both the target gene(s) and distant outgroups, then constructs a phylogeny. After excising the monophyletic clade specified by user-specified anchor (IE outgroup) sequence(s), excised subtree sequences from each species are concatenated, filtered for quality, and aligned to construct a final focused phylogeny.

The entire pipeline can be summarized in 6 key steps:
1) GENERATING INITIAL SPECIES BLAST DATA
2) GENERATING INITIAL SPECIES PHYLOGENIES
3) EXTRACTING FOCUSED SPECIES SUBTREES
4) FILTERING CONCATENATED SUBTREE DATASET: HMMR & ALIGNMENT EDITING
5) GENERATING FINAL PHYFOCUSED PHYLOGENY
6) OPTIONAL: GENERATING CORRESPONDING SPECIES PHYLOGENY

PhyFocus requires three user-provided datasets:

1) A query fasta file containing all bait (representatives of the target gene(s) and
   related outgroups) and anchor (defines the subtree outgroup) peptide sequences.

2) A directory of peptide FASTA files for each species assessed in the phylogeny. For proper species-specific header annotation, all FASTA file names must begin with the genus and underscore (i.e., "genus_").

3) A FASTA alignment of proteins characterizing the target gene(s) or gene family. This is used to build the HMMR profile for HMMR filtering before final phylogeny construction. Careful selection of characterizing proteins and rigorous alingment methodology (e.g., MAFFT linsi) is key.

----------------------------------------------
PATH Dependencies:
    NCBI BLAST+ (specifically, makeblastdb and blastp)
    CD-HIT
    MAFFT
    IQTREE
    HMMER

Included Dependencies:
    tree_editor.R (template must be modified with query fasta baits and anchors)
    header_translator.py
    alignment_editor.py
    delim_converter.py
----------------------------------------------

EOF
}

# Create input option variables
QUERY=""
FASTAS=""
THREADS=24
EVALUE="1e-05"
MODEL="MFP+C60"
BOOT=1000
IQALRT=1000
#SPTREE=false
#SPEVALUE="1e-20"
#SPREF=""

# Create error messages for improper option input
q_error="Option error; path must be to an existing file. Format: -q <./fasta_query_file>"
f_error="Option error; path must be to an existing directory. Format: -f <./species_fasta_files_directory/>"
H_error="Option error; path must be to an existing file. Format: -H <./fasta_peptide_file>"
t_error="Option error; thread usage must be an integer. Required format: -t <integer>"
E_error="Option error; need value in scientific notation. Format: -E <num>e-<num>"
m_error="Option error; string needs to be an IQtree model. Format: -m <value>"
b_error="Option error; bootstrap replicates must be an integer. Format: -b <integer>"
a_error="Option error. SH-aLRT replicates must be an integer. Format: -a <integer>"
#s_error="Option error; no argument required. Format: -s"
#e_error="Option error; need value in scientific notation. Format: -e <num>e-<num>"
#r_error="Option error; reference genus must be a string. Format: -r <genus>"

# Handling for option arguments, including improper arguments
### These all require extensive testing before version publishing.
while getopts ":hq:f:H:t:E:m:b:a:se:r:" option; do
    case $option in
        h) help; exit 0;;
        q) QUERY=$OPTARG; if [[ ! -s $OPTARG ]]; then echo $q_error >&2; exit 1; fi;;
        f) FASTAS=$OPTARG; if [[ ! -d $OPTARG ]]; then echo $f_error >&2; exit 1; fi;;
        H) HMMR=$OPTARG; if [[ ! -s $OPTARG ]]; then echo $f_error >&2; exit 1; fi;;
        t) THREADS=$OPTARG; if [[ ! -d $OPTARG ]]; then echo $t_error >&2; exit 1; fi;;
        E) EVALUE=$OPTARG; if [[ ! -n $OPTARG ]]; then echo $E_error >&2; exit 1; fi;;
        m) MODEL=$OPTARG; if [[ ! -n $OPTARG ]]; then echo $m_error >&2; exit 1; fi;;
        ### Can I check for an integer here?
        b) BOOT=$OPTARG; if [[ ! -d $OPTARG ]]; then echo $b_error >&2; exit 1; fi;;
        ### Can I check for an integer here?
        a) IQALRT=$OPTARG; if [[ ! -d $OPTARG ]]; then echo $a_error >&2; exit 1; fi;;
#        s) SPTREE=true; if [[ ! -z $OPTARG ]]; then echo $s_error >&2; exit 1; fi;;
#        e) SPEVALUE=$OPTARG; if [[ ! -n $OPTARG ]]; then echo $e_error >&2; exit 1; fi;;
#        r) SPREF=$OPTARG; if [[ ! -n $OPTARG ]]; then echo $r_error >&2; exit 1; fi;;
        \?) echo "Unknown option: -$OPTARG" >&2; exit 1;;
        :) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
        *) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
    esac
done
# Print help menu if no options are specified.
if [[ -z $QUERY && -z $FASTAS ]]; then help; exit 0; fi
# Exit program if required options are not specified by user
if [[ (-z $QUERY || -z $FASTAS) || (-z $HMMR)]]; then echo "Missing option. Syntax: ./${0##*/} [-q file] [-f directory] [-H file]" >&2; exit 1; fi



echo -------------------------------- | tee -a out_log.txt
echo "PART 1: GENERATING INITIAL BLAST DATA" | tee -a out_log.txt
# Unzip all fasta files
echo "Unzipping any gzip files in $FASTAS ..." | tee -a out_log.txt
gzip -d ${FASTAS}/*.gz | tee -a out_log.txt 2>> error_log.txt | tee -a out_log.txt

# For each species fasta file, use parameter expansion to extract genus name, then AWK
# to change each sequence header to a "genus_#####" numerical header, and write each sequence
# on 1 line without STOP signals.
# Syntax: "NR==1" prevents line feed at start of file, "header_edit "_%05d\n", ++i" creates
# numerical headers, "else {gsub("\\*", "", $0); printf}" ensures every sequence line is written
# with 1 linefeed and has removed any STOP (*) signals.
echo "Fixing FASTA headers and seqs ..." | tee -a out_log.txt
for original_filename in $FASTAS/*; do file_name=${original_filename##*/}; awk -v genus=${file_name%%_*} '{if(NR==1) {printf ">" genus "_%05d\n", ++i "\n"} else {if($0 ~ /^>/) {printf "\n" ">" genus "_%05d\n", ++i "\n"} else {gsub("\\*", "", $0); printf $0}}}' $original_filename > ${file_name}_FIX.fa 2>> error_log.txt; done

# Generate a file containing all NCBI headers for header translation table
cat ./$FASTAS/* | grep ">" > all_ncbi_headers.txt 2>> error_log.txt
# make directory for fixed fastas, then move FIX files
echo "moving modified header fastas to ./fixed_fastas/ ..." | tee -a out_log.txt
mkdir ./fixed_fastas
mv *_FIX.fa ./fixed_fastas
echo "Successfully moved $(ls ./fixed_fastas | wc -l) files to ./fixed_fastas/" | tee -a out_log.txt
echo "FASTA Header Fix Complete" | tee -a out_log.txt
# Make a translation table for numerical headers --> informative NCBI headers
echo "Making numerical sequence header translation table." | tee -a out_log.txt
cat ./fixed_fastas/* | grep ">" > all_fixed_numerical_headers.txt 2>> error_log.txt
./header_translator.py all_ncbi_headers.txt all_fixed_numerical_headers.txt 2>> error_log.txt | tee -a out_log.txt
if [[ -s header_translation_table.tsv ]]; then echo "numerical header --> NCBI header translation table complete" | tee -a out_log.txt; else echo "Header translation table could not be made; examine *headers.txt files and fixed_fasta files." >> error_log.txt; exit 1; fi
rm all_ncbi_headers.txt ./all_fixed_numerical_headers.txt

# Format blast databases from $FASTAS & run BLASTp)
echo "Blasting $FASTAS peptide databases with $QUERY ..." | tee -a out_log.txt
for species_pep in ./fixed_fastas/*
do
    echo "formating BLAST database for $species_pep ..." | tee -a out_log.txt
    makeblastdb -in $species_pep -parse_seqids -out ${species_pep%.*}_db -dbtype prot 2>> error_log.txt | tee -a out_log.txt
    # blastp query file against species_pep database
    echo "BLASTING $QUERY sequences against $species_pep database ..." | tee -a out_log.txt
    blastp -db ${species_pep%.*}_db -query $QUERY -evalue $EVALUE -num_threads $THREADS -out ${species_pep%.*}_ref_blastout -outfmt 6 -max_target_seqs 1000 2>> error_log.txt | tee -a out_log.txt
done
# move blast dbs & blast outputs to new directories
echo "moving db's to ../blastdb" | tee -a out_log.txt
mkdir ./blastdb
mv ./fixed_fastas/*_db* ./blastdb
echo "moving blastout files to ./blastout_maxseqs" | tee -a out_log.txt
mkdir ./blastout_maxseqs
mv ./fixed_fastas/*blastout ./blastout_maxseqs/



echo -------------------------------- | tee -a out_log.txt
echo "PART 2: GENERATING INITIAL PHYLOGENY ..." | tee -a out_log.txt

echo "Writing blast hit FASTA files ..." | tee -a out_log.txt
# Retrieve accession numbers for each blastp output & move to new dir
for blastfile in ./blastout_maxseqs/*blastout; do echo "Retrieving blast hit accessions for $blastfile ..." | tee -a out_log.txt; cut -f 2 $blastfile > ${blastfile%.}_hits.txt; done
# Move all hit accession files to new dir called hit1_accessions
mkdir ./hit1_accessions
mv ./blastout_maxseqs/*_hits.txt ./hit1_accessions
echo "Successfully moved $(ls ./hit1_accessions | wc -l) hit files to hit1_accessions" | tee -a out_log.txt
# Retrieve blast hit seqeunces from *_FIX.fa files for each taxa
echo "Retrieving blast hit seqeunces from fixed FASTA files ..." | tee -a out_log.txt
for hitfile in ./hit1_accessions/*_hits.txt
do
    # store hit accessions in a temp FASTA file
    awk '{printf ">" $0 "\n"}' < $hitfile > temp.txt
    # Store fixed_fasta file name in a variable
    filenamefull=${hitfile##*/}
    filename="${filenamefull%_ref_blastout_hits*}.fa"
    # Retrieve blast hit seqeunces from *_FIX.fa files for each taxa
    echo "pulling FASTA seqs from fixed_fastas/ for hit accessions in $filename ..." | tee -a out_log.txt
    grep -A 1 -f temp.txt --no-group-separator ./fixed_fastas/$filename > hits_$filename 2>> error_log.txt
    if [[ ! (-s hits_$filename) ]]; then echo "Error retrieving hit squences for hits_$filename; examine fixed fasta file." >> error_log.txt; exit 1; fi
done
rm ./temp.txt
# Move retrieved hit fasta seqs to the new directory hits_fasta/
mkdir hits_fasta
mv hits_*.fa ./hits_fasta
echo "Successfully moved $(ls ./hits_fasta/hits_*.fa | wc -l) hit sequence fasta files to hits_fasta" | tee -a out_log.txt

# Remove similar seqs, concatenate queries+anchors+hits, and then align for each taxa
echo "Making MAFFT alignments for initial phylogeny ..." | tee -a out_log.txt
for fasta in ./hits_fasta/*.fa
do
    # run CD-HIT to remove seqs with 98% or higher seq similarity
    echo "Running CD-HIT on $fasta ..." | tee -a out_log.txt
    cd-hit -i $fasta -o ${fasta%.}_cdhit -c 0.98 -n 5 2>> error_log.txt | tee -a out_log.txt
    # after concatenation, align via MAFFT
    echo "Concatenating bait+anchor seqs and cdhit results ..." | tee -a out_log.txt
    cat ./$QUERY ${fasta}*cdhit > ${fasta%.}_bts_ancrs 2>> error_log.txt
    echo "Aligning concatenated seqs with MAFFT ..." | tee -a out_log.txt
    mafft ${fasta%.}_bts_ancrs > ${fasta%.}_ali.fa 2>> error_log.txt | tee -a out_log.txt
done
# Make new dir named align/ for all alignments and clean up temp cat files
mkdir align
mv ./hits_fasta/*ali.fa ./align
rm ./hits_fasta/*ancrs
echo "Moved $(ls ./align | wc -l) alignments to ./align" | tee -a out_log.txt

# Make ML phylogenies from MAFFT aligned files using IQtree
echo "Making Maximum Liklihood Phylogenies ..." | tee -a out_log.txt
cd ./align
for alignment in *ali.fa
do
    echo "Running IQtree on $alignment ..." | tee -a ../out_log.txt
    # Makes IQtree maximum likelihood phylogenies. For test runs, use LG??
    iqtree -s $alignment -m $MODEL -alrt $IQALRT -bb $BOOT -nt $THREADS 2>> ../error_log.txt | tee -a ../out_log.txt
done
# iqTree final tree topology files moved to IQ_out
echo "Moving $(ls *.treefile | wc -l) IQtree output trees to IQ_out/..." | tee -a ../out_log.txt
mkdir IQ_out; mv *.treefile IQ_out
# IQtree additional outputs moved to IQ_out_pars_logs
echo "Moving other IQtree files to IQ_out_extra_files/..." | tee -a ../out_log.txt
mkdir IQ_out_extra_files; mv *.fa.* IQ_out_extra_files



# Use Tree_editor to select subtree sequences (IE the focusing step)
echo -------------------------------- | tee -a ../out_log.txt
echo "PART 3: EXTRACTING FOCUSED SUBTREE ..." | tee -a ../out_log.txt
cd IQ_out
echo "Running tree_editor.R..." | tee -a ../../out_log.txt
Rscript ../../tree_editor.R 2>> ../../error_log.txt | tee -a ../../out_log.txt

# Remove unwanted space and prefix to tree_editor out files: (GENUS_SPECIES_FIX.fa_ali.fa_tips.txt)
echo "Fixing Tree_editor.R outfile names..." | tee -a ../../out_log.txt
for tips_file in ./*.txt; do mv "$tips_file" "${tips_file/' '}"; done;
rename '_FIX.fa_ali.fa' '' ./align/IQ_out/*.txt

# Retrieve fasta seqs for genes included in tree_editor.R output, and move to tip_seqs/
cd ../../
mkdir tip_seqs
for file in ./align/IQ_out/*_tips.txt
do
    echo "Extracting subtree fasta sequences for $file..." | tee -a out_log.txt
    genus=$(echo $file | cut -d '_' -f 3)
    grep -A 1 --no-group-separator -f $file ./fixed_fastas/${genus}*_FIX.fa > ./tip_seqs/${genus}_tipseqs.fa 2>> error_log.txt
done

# Concatenate all fastas together, making the "total tree" dataset
mkdir final_tree_dataset; cd final_tree_dataset
echo "Concatenating tip_seqs and bait+anchor seqs ..." | tee -a ../out_log.txt
cat ../tip_seqs/*.fa ../$QUERY > ./concat_tip_seqs.fa 2>> ../error_log.txt

# Remove duplicate seqs derived from concatenating all the tip_seq fastas
echo "Removing identical seqs from concatenated subtree file ..." | tee -a ../out_log.txt
cd-hit -i ./concat_tip_seqs.fa -o ./concat_tip_seqs_cdhit.fa -c 1.0 -n 5 2>> ../error_log.txt | tee -a ../out_log.txt
# removes any special characters and aligns total fasta in MAFFT, and removes sequence line feeds
perl -pi -e 's/\*//g' ./concat_tip_seqs_cdhit.fa





echo -------------------------------- | tee -a ../out_log.txt
echo "PART 4: FILTERING SUBTREE DATASET: HMMR & ALIGNMENT EDITING ..." | tee -a ../out_log.txt

# Make directory for subtree dataset filtering
mkdir ./filtering_output; cd ./filtering_output

# Build a HMMR gene homolog profile
echo "Building HMMR profile & matching against subtree seqs ..." | tee -a ../../out_log.txt
hmmbuild hmmr_profile.hmm ../../$HMMR 2>> ../../error_log.txt | tee -a ../../out_log.txt
# Use HMMR profile to identify target homologs in the focused subtree dataset
hmmsearch hmmr_profile.hmm ../concat_tip_seqs_cdhit.fa > hmmsearch_results.out 2>> ../../error_log.txt | tee -a ../../out_log.txt

# Generate a table of significantly matched HMMR hits
echo "Extracting significantly matched sequences ..." | tee -a ../../out_log.txt
grep -E "^ *?[0-9]\.?[0-9]?e-[0-9]*" hmmsearch_results.out > hmmr_hits_table.txt 2>> ../../error_log.txt

# Converts space-delimited HMMR outfile table to tsv
../../delim_converter.py 2>> ../../error_log.txt | tee -a ../../out_log.txt

# Extract match headers from HMMR tsv, then extract their seqs in FASTA format
cut -f 9 hmmr_hits_table.tsv > hmmr_significant_hits_headers.txt 2>> ../../error_log.txt
grep -A 1 --no-group-separator -f hmmr_significant_hits_headers.txt ../concat_tip_seqs_cdhit.fa > hmmr_significant_hits.fa 2>> ../../error_log.txt

echo "Aligning HMMR seqs ..." | tee -a ../../out_log.txt
mafft hmmr_significant_hits.fa > hmmr_significant_hits_ali.fa 2>> ../../error_log.txt | tee -a ../../out_log.txt

echo "User assessment of alignment. Please examine 'hmmr_significant_hits_ali.fa' and assess problematic gaps. See alignment_editor.py -h for details." | tee -a ../../out_log.txt
